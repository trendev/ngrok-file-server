on:
  push:
    branches:
      - main
  pull_request:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

name: Build & Save artifacts
jobs:
  check_skip_flags:
    runs-on: ubuntu-latest
    outputs:
      head-commit-message: ${{ steps.get_head_commit_message.outputs.HEAD_COMMIT_MSG }}
    steps:
      - name: Get repo
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Print head git commit message
        id: get_head_commit_message
        run: echo "HEAD_COMMIT_MSG=$(git show -s --format=%s)" >> $GITHUB_OUTPUT
  test:
    needs: [check_skip_flags]
    if: "!contains(needs.check_skip_flags.outputs.head-commit-message, '[skip-build]')"
    strategy:
      matrix:
        go-version: [1.19.X, 1.20.x]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}
      - name: Display Go version
        run: go version
      - name: Test
        run: go test -v ./...
      # - name: Build Linux/MacOs
      #   if: ${{ !contains(matrix.os,'windows') }}
      #   run: go build -o bin/ngrok-file-server -v api/main.go
      # - name: Build Windows
      #   if: ${{ contains(matrix.os,'windows') }}
      #   run: go build -o bin/ngrok-file-server.exe -v api/main.go
      # - name: Archive
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: ngrok-file-server_${{ matrix.os }}
      #     path: ./bin/*
      #     retention-days: 30
  docker:
    needs: [test]
    if: "!contains(needs.check_skip_flags.outputs.head-commit-message, '[skip-docker]')"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Log in to the Container registry
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4.3.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=schedule
            type=raw,value=latest,enable=${{ endsWith(GitHub.ref, 'main') }}
            type=raw,event=branch,value={{branch}}
            type=semver,pattern={{raw}}
            type=sha,format=long
      - name: Build and push Docker image
        uses: docker/build-push-action@v4.0.0
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
